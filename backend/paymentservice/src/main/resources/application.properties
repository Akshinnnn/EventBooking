server.port=8080

spring.application.name=paymentservice

# Database Settings
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/payment_db
spring.datasource.username=${POSTGRES_USER:postgres}
spring.datasource.password=${POSTGRES_PASSWORD:postgres}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
# Allows for auto creation of tables
spring.jpa.hibernate.ddl-auto = update

# Eureka Client Settings
eureka.client.serviceUrl.defaultZone = http://discoveryserver:8761/eureka
eureka.instance.preferIpAddress = true

# Kafka Settings
spring.kafka.bootstrap-servers=broker:9092

##  Kafka Producer Settings
spring.kafka.producer.bootstrap-servers=broker:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=paymentdto:com.eventbooking.paymentservice.dto.PaymentDTO

##  Kafka Consumer Settings
spring.kafka.consumer.bootstrap-servers=broker:9092
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.group-id=PaymentServiceConsumer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=bookingdto:com.eventbooking.paymentservice.dto.BookingDTO
